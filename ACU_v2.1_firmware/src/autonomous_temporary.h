/**
 * @file autonomous_temporary.h
 *
 * @brief This header file was generated by cantools version 40.2.3 Thu Jun 26 17:38:38 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef AUTONOMOUS_TEMPORARY_H
#define AUTONOMOUS_TEMPORARY_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_FRAME_ID (0x51u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_FRAME_ID (0x61u)
#define AUTONOMOUS_TEMPORARY_VCU_RPM_FRAME_ID (0x510u)
#define AUTONOMOUS_TEMPORARY_TARGET_RPM_FRAME_ID (0x500u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_FRAME_ID (0x71u)
#define AUTONOMOUS_TEMPORARY_RD_JETSON_FRAME_ID (0x512u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_FRAME_ID (0x502u)
#define AUTONOMOUS_TEMPORARY_VCU_HV_FRAME_ID (0x81u)
#define AUTONOMOUS_TEMPORARY_RES_FRAME_ID (0x191u)

/* Frame lengths in bytes. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_LENGTH (1u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_LENGTH (1u)
#define AUTONOMOUS_TEMPORARY_VCU_RPM_LENGTH (2u)
#define AUTONOMOUS_TEMPORARY_TARGET_RPM_LENGTH (2u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_LENGTH (5u)
#define AUTONOMOUS_TEMPORARY_RD_JETSON_LENGTH (1u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_LENGTH (1u)
#define AUTONOMOUS_TEMPORARY_VCU_HV_LENGTH (3u)
#define AUTONOMOUS_TEMPORARY_RES_LENGTH (8u)

/* Extended or standard frame types. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_VCU_RPM_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_TARGET_RPM_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_RD_JETSON_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_AS_STATE_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_VCU_HV_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_RES_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_MANUAL_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_ACCELERATION_CHOICE (1u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_SKIDPAD_CHOICE (2u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_TRACKDRIVE_CHOICE (3u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_BRAKETEST_CHOICE (4u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_INSPECTION_CHOICE (5u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_AUTOCROSS_CHOICE (6u)

#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_MANUAL_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_ACCELERATION_CHOICE (1u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_SKIDPADD_CHOICE (2u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_TRACKDRIVE_CHOICE (3u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_BRAKETEST_CHOICE (4u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_INSPECTION_CHOICE (5u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_AUTOCROSS_CHOICE (6u)

#define AUTONOMOUS_TEMPORARY_ACU_IGN_IGN_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_IGN_ON_CHOICE (1u)

#define AUTONOMOUS_TEMPORARY_ACU_IGN_ASMS_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_ASMS_ON_CHOICE (1u)

#define AUTONOMOUS_TEMPORARY_ACU_IGN_EMERGENCY_EMERGENCY_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_EMERGENCY_EMERGENCY_ON_CHOICE (1u)

#define AUTONOMOUS_TEMPORARY_RD_JETSON_RD_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_RD_JETSON_RD_ON_CHOICE (1u)

#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_OFF_CHOICE (1u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_READY_CHOICE (2u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_DRIVING_CHOICE (3u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_EMERGENCY_CHOICE (4u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_FINISH_CHOICE (5u)

#define AUTONOMOUS_TEMPORARY_VCU_HV_HV_HV_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_VCU_HV_HV_HV_ON_CHOICE (9u)
#define AUTONOMOUS_TEMPORARY_VCU_HV_HV_CONTACTOR_ERROR_CHOICE (10u)

#define AUTONOMOUS_TEMPORARY_RES_SIGNAL_EMERGENCY_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_RES_SIGNAL_GO_SIGNAL_CHOICE (5u)
#define AUTONOMOUS_TEMPORARY_RES_SIGNAL_GO_SIGNAL_2_CHOICE (7u)

/* Frame Names. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_NAME "ACU_MS"
#define AUTONOMOUS_TEMPORARY_JETSON_MS_NAME "JETSON_MS"
#define AUTONOMOUS_TEMPORARY_VCU_RPM_NAME "VCU_RPM"
#define AUTONOMOUS_TEMPORARY_TARGET_RPM_NAME "Target_RPM"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_NAME "ACU_IGN"
#define AUTONOMOUS_TEMPORARY_RD_JETSON_NAME "RD_JETSON"
#define AUTONOMOUS_TEMPORARY_AS_STATE_NAME "AS_STATE"
#define AUTONOMOUS_TEMPORARY_VCU_HV_NAME "VCU_HV"
#define AUTONOMOUS_TEMPORARY_RES_NAME "RES"

/* Signal Names. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_NAME "Mission_Select"
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_NAME "Mission_Select"
#define AUTONOMOUS_TEMPORARY_VCU_RPM_RPM_NAME "RPM"
#define AUTONOMOUS_TEMPORARY_TARGET_RPM_RPM_NAME "RPM"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_IGN_NAME "IGN"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_ASMS_NAME "ASMS"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_EMERGENCY_NAME "Emergency"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_EBS_PRESSURE_FRONT_NAME "EBS_Pressure_Front"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_EBS_PRESSURE_REAR_NAME "EBS_Pressure_Rear"
#define AUTONOMOUS_TEMPORARY_RD_JETSON_RD_NAME "RD"
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_NAME "STATE"
#define AUTONOMOUS_TEMPORARY_VCU_HV_HV_NAME "HV"
#define AUTONOMOUS_TEMPORARY_VCU_HV_BRAKE_PRESSURE_FRONT_NAME "Brake_pressure_Front"
#define AUTONOMOUS_TEMPORARY_VCU_HV_BRAKE_PRESSURE_REAR_NAME "Brake_pressure_Rear"
#define AUTONOMOUS_TEMPORARY_RES_SIGNAL_NAME "SIGNAL"

/**
 * Signals in message ACU_MS.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_acu_ms_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mission_select;
};

/**
 * Signals in message JETSON_MS.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_jetson_ms_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mission_select;
};

/**
 * Signals in message VCU_RPM.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_vcu_rpm_t {
    /**
     * Range: 0..6000 (0..6000 RPM)
     * Scale: 1
     * Offset: 0
     */
    int16_t rpm;
};

/**
 * Signals in message Target_RPM.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_target_rpm_t {
    /**
     * Range: 0..6000 (0..6000 RPM)
     * Scale: 1
     * Offset: 0
     */
    int16_t rpm;
};

/**
 * Signals in message ACU_IGN.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_acu_ign_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ign;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t asms;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t emergency;

    /**
     * Perdu gay
     *
     * Range: 0..15 (0..150 bar)
     * Scale: 10
     * Offset: 0
     */
    uint8_t ebs_pressure_front;

    /**
     * (null)
     *
     * Range: 0..15 (0..150 bar)
     * Scale: 10
     * Offset: 0
     */
    uint8_t ebs_pressure_rear;
};

/**
 * Signals in message RD_JETSON.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_rd_jetson_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rd;
};

/**
 * Signals in message AS_STATE.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_as_state_t {
    /**
     * Regulations
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t state;
};

/**
 * Signals in message VCU_HV.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_vcu_hv_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hv;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pressure_front;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pressure_rear;
};

/**
 * Signals in message RES.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal;
};

/**
 * Pack message ACU_MS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_acu_ms_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_acu_ms_t *src_p,
    size_t size);

/**
 * Unpack message ACU_MS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_acu_ms_unpack(
    struct autonomous_temporary_acu_ms_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACU_MS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_acu_ms_init(struct autonomous_temporary_acu_ms_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ms_mission_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ms_mission_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ms_mission_select_is_in_range(uint8_t value);

/**
 * Pack message JETSON_MS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_jetson_ms_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_jetson_ms_t *src_p,
    size_t size);

/**
 * Unpack message JETSON_MS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_jetson_ms_unpack(
    struct autonomous_temporary_jetson_ms_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from JETSON_MS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_jetson_ms_init(struct autonomous_temporary_jetson_ms_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_ms_mission_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_ms_mission_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_ms_mission_select_is_in_range(uint8_t value);

/**
 * Pack message VCU_RPM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_vcu_rpm_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_vcu_rpm_t *src_p,
    size_t size);

/**
 * Unpack message VCU_RPM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_vcu_rpm_unpack(
    struct autonomous_temporary_vcu_rpm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_RPM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_vcu_rpm_init(struct autonomous_temporary_vcu_rpm_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t autonomous_temporary_vcu_rpm_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_rpm_rpm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_rpm_rpm_is_in_range(int16_t value);

/**
 * Pack message Target_RPM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_target_rpm_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_target_rpm_t *src_p,
    size_t size);

/**
 * Unpack message Target_RPM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_target_rpm_unpack(
    struct autonomous_temporary_target_rpm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Target_RPM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_target_rpm_init(struct autonomous_temporary_target_rpm_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t autonomous_temporary_target_rpm_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_target_rpm_rpm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_target_rpm_rpm_is_in_range(int16_t value);

/**
 * Pack message ACU_IGN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_acu_ign_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_acu_ign_t *src_p,
    size_t size);

/**
 * Unpack message ACU_IGN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_acu_ign_unpack(
    struct autonomous_temporary_acu_ign_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACU_IGN.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_acu_ign_init(struct autonomous_temporary_acu_ign_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ign_ign_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ign_ign_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ign_ign_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ign_asms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ign_asms_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ign_asms_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ign_emergency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ign_emergency_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ign_emergency_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ign_ebs_pressure_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ign_ebs_pressure_front_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ign_ebs_pressure_front_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ign_ebs_pressure_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ign_ebs_pressure_rear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ign_ebs_pressure_rear_is_in_range(uint8_t value);

/**
 * Pack message RD_JETSON.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_rd_jetson_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_rd_jetson_t *src_p,
    size_t size);

/**
 * Unpack message RD_JETSON.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_rd_jetson_unpack(
    struct autonomous_temporary_rd_jetson_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RD_JETSON.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_rd_jetson_init(struct autonomous_temporary_rd_jetson_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_rd_jetson_rd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_rd_jetson_rd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_rd_jetson_rd_is_in_range(uint8_t value);

/**
 * Pack message AS_STATE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_as_state_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_as_state_t *src_p,
    size_t size);

/**
 * Unpack message AS_STATE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_as_state_unpack(
    struct autonomous_temporary_as_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AS_STATE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_as_state_init(struct autonomous_temporary_as_state_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_as_state_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_as_state_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_as_state_state_is_in_range(uint8_t value);

/**
 * Pack message VCU_HV.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_vcu_hv_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_vcu_hv_t *src_p,
    size_t size);

/**
 * Unpack message VCU_HV.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_vcu_hv_unpack(
    struct autonomous_temporary_vcu_hv_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_HV.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_vcu_hv_init(struct autonomous_temporary_vcu_hv_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_hv_hv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_hv_hv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_hv_hv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_hv_brake_pressure_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_hv_brake_pressure_front_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_hv_brake_pressure_front_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_hv_brake_pressure_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_hv_brake_pressure_rear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_hv_brake_pressure_rear_is_in_range(uint8_t value);

/**
 * Pack message RES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_res_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_res_t *src_p,
    size_t size);

/**
 * Unpack message RES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_res_unpack(
    struct autonomous_temporary_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_res_init(struct autonomous_temporary_res_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_res_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_res_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_res_signal_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
